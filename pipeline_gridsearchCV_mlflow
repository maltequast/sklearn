import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression


mlflow.sklearn.autolog()

numeric_features = X.columns.to_list()
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
    ])
        
        
clf = Pipeline(steps=[('preprocessor', preprocessor),
                      ('classifier', LogisticRegression())
                  ]) 

param_grid={'classifier__penalty' : ['l1', 'l2'],
    'classifier__C' : np.logspace(-4, 4, 20),
    'classifier__solver' : ['liblinear']}

search = GridSearchCV(clf, param_grid, n_jobs=-1)
# clf = clf.fit(X,Y)
with mlflow.start_run() as run:
    search.fit(X, Y)
print("Best parameter (CV score=%0.3f):" % search.best_score_)
print(search.best_params_)
