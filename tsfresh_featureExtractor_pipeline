
import mlflow
import numpy as np
import optuna
from optuna.integration.mlflow import MLflowCallback
from optuna.integration import SkoptSampler
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.ensemble import RandomForestClassifier
from tsfresh.feature_extraction import extract_features


iris = load_iris()
df = pd.DataFrame(iris.data, columns = iris.feature_names)
X = df.copy()
df['species'] = iris.target
y = pd.DataFrame(iris.target , columns= ['species'])
X.reset_index(inplace = True)


class featureExtractor(BaseEstimator, TransformerMixin):
    def __init__(self, fc_parameters=None,column_id= None):
        self.fc_parameters = fc_parameters
        self.column_id = column_id
        
    def fit(self, X, y= None):
        return self
    
    def fit_transform(self, X, y = None):
        extracted_features = extract_features(pd.DataFrame(np.array(X)),fc_parameters,column_id=0)
        return  pd.merge(pd.DataFrame(X), extracted_features, left_index=True, right_index=True, how="left")
    
    def transform(self, X):
        extracted_features = extract_features(pd.DataFrame(np.array(X)),fc_parameters,column_id=0)
        return  pd.merge(pd.DataFrame(X), extracted_features, left_index=True, right_index=True, how="left")


fc_parameters = {
    "length": None,
    "large_standard_deviation": [{"r": 0.05}, {"r": 0.1}]
}


p = Pipeline([
      ('fresh', extractor(fc_parameters, 0)),
      ('imputer', SimpleImputer(strategy='median')),
      ('scaler', StandardScaler()),
      ('classifier', RandomForestClassifier())
])
clf = p.fit(X,y['species'].ravel())

clf.predict(X)
